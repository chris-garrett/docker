FROM ghcr.io/linuxserver/baseimage-debian:bookworm AS build

ARG TARGETARCH

ENV PATH="/work/opt/bin:$PATH"
ENV HOST_ENVIRONMENT=container

RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked,mode=0755 \
    --mount=target=/var/cache/apt,type=cache,sharing=locked,mode=0755 \
    set -eux; \
    apt update; \
    apt upgrade -y; \
    apt install -y --no-install-recommends \
    ca-certificates \
    libicu72 \
    tzdata \
    xz-utils \
    vim \
    git \
    git-lfs \
    build-essential \
    iputils-ping \
    iproute2 \
    procps \
    binutils \
    ncdu \  
    unzip \
    curl \
    file \
    ; \
    useradd -s /bin/bash -m sprout; \
    echo "alias l='ls -laFHh'" >> /root/.bashrc; \
    mkdir -p /work/app /work/opt/bin; \
    rm -rf /var/lib/apt/lists/*;

# install watchexec
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="aarch64"; \
    else \
    ARCH="x86_64"; \
    fi; \
    curl -o /tmp/watchexec.tar.xz -LsSf https://github.com/watchexec/watchexec/releases/download/v2.1.2/watchexec-2.1.2-${ARCH}-unknown-linux-gnu.tar.xz; \
    tar -C /work/opt/bin --strip-components=1 -xf /tmp/watchexec.tar.xz watchexec-2.1.2-${ARCH}-unknown-linux-gnu/watchexec

# install dockerize
RUN set -eux; \
    curl -o /tmp/dockerize.tgz -LsSf https://github.com/jwilder/dockerize/releases/download/v0.7.0/dockerize-linux-${TARGETARCH}-v0.7.0.tar.gz; \
    tar -C /work/opt/bin -xf /tmp/dockerize.tgz 

# add static curl
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="aarch64"; \
    else\
    ARCH="x86_64"; \
    fi; \
    curl -o /tmp/curl.tgz -L -C - https://github.com/stunnel/static-curl/releases/download/8.11.1/curl-linux-${ARCH}-glibc-8.11.1.tar.xz; \
    tar -C /work/opt/bin -xf /tmp/curl.tgz

# install python via miniconda
ENV PATH=/work/opt/venv/bin:$PATH
ENV UV_PYTHON_INSTALL_DIR=/work/opt/python

# install fnm/node
RUN --mount=target=/root/.cache/pip,type=cache,sharing=locked,mode=0755 \
    set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="arm64"; \
    else \
    ARCH="linux"; \
    fi; \
    curl -o /tmp/fnm.zip -LsSf "https://github.com/Schniz/fnm/releases/download/v1.38.1/fnm-${ARCH}.zip"; \
    unzip -d /work/opt/bin /tmp/fnm.zip; \
    /work/opt/bin/fnm env >> /root/.bashrc; \
    eval $(/work/opt/bin/fnm env); \
    /work/opt/bin/fnm use 20.18.3 --install-if-missing;


# install bun
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCHIVE="bun-linux-aarch64"; \
    else \
    ARCHIVE="bun-linux-x64"; \
    fi; \
    curl -o /tmp/bun.zip -LsSf "https://github.com/oven-sh/bun/releases/download/bun-v1.2.0/${ARCHIVE}.zip"; \
    unzip -d /tmp /tmp/bun.zip; \
    mv /tmp/${ARCHIVE}/bun /work/opt/bin/bun;


# install deno
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="aarch64"; \
    else \
    ARCH="x86_64"; \
    fi; \
    curl -o /tmp/deno.zip -LsSf "https://github.com/denoland/deno/releases/download/v2.1.10/deno-${ARCH}-unknown-linux-gnu.zip"; \
    unzip -d /work/opt/bin /tmp/deno.zip;



FROM build AS final

# don't bother being gracful in dev images. 
# can be overriden in final image if req. 
ENV S6_KILL_GRACETIME=0
ENV S6_KEEP_ENV=1
# linux defaults. override in compose. 
ENV PUID=1000
ENV PGID=1000

COPY <<EOF /etc/s6-overlay/s6-rc.d/init-adduser/branding
    :::::::::   ::::::::   ::::::::  :::    ::: :::::::::: :::::::::  
    :+:    :+: :+:    :+: :+:    :+: :+:   :+:  :+:        :+:    :+: 
    +:+    +:+ +:+    +:+ +:+        +:+  +:+   +:+        +:+    +:+ 
    +#+    +:+ +#+    +:+ +#+        +#++:++    +#++:++#   +#++:++#:  
    +#+    +#+ +#+    +#+ +#+        +#+  +#+   +#+        +#+    +#+ 
    #+#    #+# #+#    #+# #+#    #+# #+#   #+#  #+#        #+#    #+# 
    #########   ########   ########  ###    ### ########## ###    ### 
EOF

#ENV PATH=/work/opt/venv/bin:$PATH
ENV NODE_ENV=development

RUN set -eux; \
    fnm env --use-on-cd --shell bash --fnm-dir=/work/opt/fnm >> /home/sprout/.bashrc; \
    eval "`fnm env --use-on-cd --shell bash --fnm-dir=/work/opt/fnm`"; \
    fnm use 20.18.3 --install-if-missing --corepack-enabled;

LABEL org.opencontainers.image.node_version="20.18.3"
LABEL org.opencontainers.image.fnm_version="1.38.1"
LABEL org.opencontainers.image.bun_version="1.2.0"

COPY <<EOF /etc/s6-overlay/s6-rc.d/init-adduser/branding
    ::::    :::  ::::::::  :::::::::  :::::::::: 
    :+:+:   :+: :+:    :+: :+:    :+: :+:        
    :+:+:+  +:+ +:+    +:+ +:+    +:+ +:+        
    +#+ +:+ +#+ +#+    +:+ +#+    +:+ +#++:++#   
    +#+  +#+#+# +#+    +#+ +#+    +#+ +#+        
    #+#   #+#+# #+#    #+# #+#    #+# #+#        
    ###    ####  ########  #########  ########## 
EOF

RUN set -eux; \
    rm -rf /var/lib/apt/lists/*

WORKDIR /work/app

LABEL org.opencontainers.image.watchexec_version="2.1.2"
LABEL org.opencontainers.image.dockerize_version="0.7.0"
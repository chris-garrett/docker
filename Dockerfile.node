FROM debian:trixie-slim AS build

ARG TARGETARCH

ENV PUID=1000 PGID=1000
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/work/opt/bin:$PATH"
ENV HOST_ENVIRONMENT=container

RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked,mode=0755 \
    --mount=target=/var/cache/apt,type=cache,sharing=locked,mode=0755 \
    set -eux; \
    apt update; \
    apt upgrade -y; \
    apt install -y --no-install-recommends \
    gosu \
    ca-certificates \
    libicu76 \
    tzdata \
    xz-utils \
    vim \
    git \
    git-lfs \
    build-essential \
    iputils-ping \
    iproute2 \
    procps \
    binutils \
    ncdu \  
    unzip \
    curl \
    file \
    ; \
    echo "alias l='ls -laFHh'" >> /root/.bashrc; \
    echo "export PATH=\"/work/opt/bin:\$PATH\"" >> /root/.bashrc; \
    mkdir -p /work/app /work/opt/bin; \
    rm -rf /var/lib/apt/lists/*;

# install watchexec
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="aarch64"; \
    else \
    ARCH="x86_64"; \
    fi; \
    curl -o /tmp/watchexec.tar.xz -LsSf https://github.com/watchexec/watchexec/releases/download/v2.3.2/watchexec-2.3.2-${ARCH}-unknown-linux-gnu.tar.xz; \
    tar -C /work/opt/bin --strip-components=1 -xf /tmp/watchexec.tar.xz watchexec-2.3.2-${ARCH}-unknown-linux-gnu/watchexec

# install dockerize
RUN set -eux; \
    curl -o /tmp/dockerize.tgz -LsSf https://github.com/jwilder/dockerize/releases/download/v0.9.3/dockerize-linux-${TARGETARCH}-v0.9.3.tar.gz; \
    tar -C /work/opt/bin -xf /tmp/dockerize.tgz 

# add static curl
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="aarch64"; \
    else\
    ARCH="x86_64"; \
    fi; \
    curl -o /tmp/curl.tgz -L -C - https://github.com/stunnel/static-curl/releases/download/8.14.1/curl-linux-${ARCH}-glibc-8.14.1.tar.xz; \
    tar -C /work/opt/bin -xf /tmp/curl.tgz

ENV NODE_ENV=development
ENV FNM_DIR=/work/opt/fnm
ENV FNM_COREPACK_ENABLED=true

RUN --mount=target=/root/.cache/node,type=cache,sharing=locked,mode=0755 \
    set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="arm64"; \
    else \
    ARCH="linux"; \
    fi; \
    curl -o /tmp/fnm.zip -LsSf "https://github.com/Schniz/fnm/releases/download/v1.38.1/fnm-${ARCH}.zip"; \
    unzip -d /work/opt/bin /tmp/fnm.zip;

RUN cat <<EOF >> /tmp/fnm-init.sh
#!/bin/bash
eval "$(/work/opt/bin/fnm env --use-on-cd --shell bash)"
/work/opt/bin/fnm use 22.16.0 --install-if-missing --corepack-enabled;
EOF

# install node
RUN set -eux; \
    bash /tmp/fnm-init.sh;

# install bun
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCHIVE="bun-linux-aarch64"; \
    else \
    ARCHIVE="bun-linux-x64"; \
    fi; \
    curl -o /tmp/bun.zip -LsSf "https://github.com/oven-sh/bun/releases/download/bun-v1.2.17/${ARCHIVE}.zip"; \
    unzip -d /tmp /tmp/bun.zip; \
    mv /tmp/${ARCHIVE}/bun /work/opt/bin/bun;


# install deno
RUN set -eux; \
    if [ "$TARGETARCH" = "arm64" ]; then \
    ARCH="aarch64"; \
    else \
    ARCH="x86_64"; \
    fi; \
    curl -o /tmp/deno.zip -LsSf "https://github.com/denoland/deno/releases/download/v2.3.6/deno-${ARCH}-unknown-linux-gnu.zip"; \
    unzip -d /work/opt/bin /tmp/deno.zip;



FROM build AS final

ENV NODE_ENV=development
ENV FNM_DIR=/work/opt/fnm
ENV FNM_COREPACK_ENABLED=true

RUN set -eux; \
    echo "eval \"\$(/work/opt/bin/fnm env --use-on-cd --shell bash --fnm-dir=/work/opt/fnm)\"" >> /root/.bashrc;

LABEL org.opencontainers.image.node_version="22.16.0"
LABEL org.opencontainers.image.fnm_version="1.38.1"
LABEL org.opencontainers.image.bun_version="1.2.17"


RUN set -eux; \
    rm -rf /var/lib/apt/lists/*

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

WORKDIR /work/app

LABEL org.opencontainers.image.watchexec_version="2.3.2"
LABEL org.opencontainers.image.dockerize_version="0.9.3"